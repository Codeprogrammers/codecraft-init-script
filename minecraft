#!/bin/bash
# /etc/init.d/minecraft
# version 0.3.6 2011-11-26 (YYYY-MM-DD)

### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Starts the minecraft server
### END INIT INFO


#Settings
USERNAME='minecraft'
SCREEN_NAME='codecraft'
BUILD='b1337'
SERVICE='craftbukkit.jar'
INVOCATION="java -Xms512M -Xmx1024M -jar craftbukkit.jar"

#File Paths
MC_PATH="/mnt/codecraft/servers/$BUILD"
RD_PATH="/mnt/codecraft/ramdisk"
WORLD_PATH='/mnt/codecraft/worlds'
WORLD_BACKUPPATH='/mnt/codecraft/archives/worlds'
SERVER_BACKUPPATH='/mnt/codecraft/archives/servers'

#Messages (sent to minecraft server console with "say" command)
SAVE_OFF_MSG="Server going readonly..."
SAVE_ON_MSG="Server going read-write..."
BACKUP_START_MSG="SERVER BACKUP STARTING"
BACKUP_DONE_MSG="SERVER BACKUP FINISHED"
BACKUP_FAIL_MSG="SERVER BACKUP FAILED"
STOP_MSG="SERVER SHUTTING DOWN IN 15 SECONDS"
RESTART_MSG="SERVER GOING FOR RESTART"

#Grabbing world name from $MC_PATH/server.properties
WORLD_NAME=$(cat $MC_PATH/server.properties | fgrep 'level-name=' | sed -e s/.*level-name=//)

#Run commands as the user defined in the $USERNAME variable
ME=`whoami`
as_user() {
  if [ $ME == $USERNAME ]
  then 
    bash -c "$1"
  else 
    su - $USERNAME -c "$1"
  fi
}

#Starts the service
mc_start() {
  if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
  then echo "Tried to start but $SERVICE was already running!"
  else echo "$SERVICE was not running... starting."

    as_user "cd $MC_PATH && screen -dmS $SCREEN_NAME $INVOCATION"   # Start screen session 
    sleep 7                                                         # Wait 7 seconds before checking service's status

    #Check to see if the service started successfully
    if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
    then echo "$SERVICE is now running."
    else echo "Could not start $SERVICE."
    fi
  fi
}

#Disables automatic saving and saves all current changes to the worlds
mc_saveoff() {
  if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
  then echo "$SERVICE is running... suspending saves"

    as_user "screen -p 0 -S $SCREEN_NAME -X eval 'stuff \"say $SAVE_OFF_MSG\"\015'"   # Tell the users that saving is turning off
    as_user "screen -p 0 -S $SCREEN_NAME -X eval 'stuff \"save-off\"\015'"            # Turn saving off
    as_user "screen -p 0 -S $SCREEN_NAME -X eval 'stuff \"save-all\"\015'"            # Save changes to the worlds
    sync; sleep 5                                                                     # Write changes to disk, Wait 5 seconds

  else echo "$SERVICE was not running. Not suspending saves."
  fi
}

#Enables automatic saving
mc_saveon() {
  if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
	then echo "$SERVICE is running... re-enabling saves"

    as_user "screen -p 0 -S codecraft -X eval 'stuff \"save-on\"\015'"            # Turn auto-saving on
    as_user "screen -p 0 -S codecraft -X eval 'stuff \"say $SAVE_ON_MSG\"\015'"   # Tell the users that saving is now on

	else echo "$SERVICE was not running. Not resuming saves."
	fi
}

#Stops the service
mc_stop() {
  if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
  then echo "$SERVICE is running... stopping."

    as_user "screen -p 0 -S codecraft -X eval 'stuff \"say $STOP_MSG\"\015'"; sleep 5   # Tell the users that the server is stopping, Wait 5 seconds
    as_user "screen -p 0 -S codecraft -X eval 'stuff \"save-all\"\015'"; sleep 10       # Save changes to the worlds, Wait 10 seconds
    as_user "screen -p 0 -S codecraft -X eval 'stuff \"stop\"\015'"; sleep 7            # Stop the server, Wait 7 seconds

  else echo "$SERVICE was not running."
  fi
  
  if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
  then echo "$SERVICE could not be shut down... still running."
  else echo "$SERVICE is shut down."
  fi
}

#Backup the current world files
mc_world_backup() {
  echo "Backing Up Worlds"
  cd $WORLD_BACKUPPATH

  # Check for directories with the current datestamp
  if ls | grep $DATE > /dev/null
  then
    bu_date=$(ls -1r --group-directories-first | head -n1)
  else
    as_user "mkdir $DATE"
    bu_date=$(ls -1r --group-directories-first | head -n1)
  fi
  
  cd $bu_date   # cd into most recently created directory

  # Check for directories with the curent timestamp. 
  if ls | grep $TIME > /dev/null
  then
    bu_time=$(ls -1r --group-directories-first | head -n1 | head -c5)   # Set $bu_time to the name of the newest directory
    bu_time="$bu_time"_`date "+%S"`                                     # Appened the current seconds time to $bu_time 
    as_user "mkdir $bu_time"                                            # Make a directory with the name contained in $bu_time
    as_user "cp -a $WORLD_PATH/* $bu_time"                              # Copy all data from the $WORLD_PATH directory to the $bu_time directory
  else
    as_user "mkdir $TIME"                                               # Make a directory with the current timestamp as the name
    bu_time=$(ls -1r --group-directories-first | head -n1)              # Set the $bu_time variable to the newest directory
    as_user "cp -a $WORLD_PATH/* $bu_time"                              # Copy all data from the $WORLD_PATH directory to the $bu_time directory
  fi
}

#Check the integrity of the backup
mc_world_backup_cksum() {
  echo "Running a Checksum of the Backups"

  as_user "mkdir $WORLD_BACKUPPATH/chksum" ; cd $WORLD_BACKUPPATH/chksum   # Make a directory named "chksum" under the $WORLD_BACKUPPATH directory
  as_user "mkdir worlds ; mkdir worlds_backup"                             # Make the "worlds" and "worlds_backup" directories under the chksum directory
  
  cd $WORLD_PATH                                                           # cd to where the worlds are stored
  as_user "tar -cf worlds.tar *"                                           # Make a tarball so we can run a checksum on all the data
  as_user "mv worlds.tar $WORLD_BACKUPPATH/chksum/worlds"                  # Move the tarball to the temporary "chksum/worlds" directory

  cd $WORLD_BACKUPPATH/$bu_date/$bu_time                                   # cd to the latest backup
  as_user "tar -cf worlds.tar *"                                           # Make a tarball so we can run a checksum on all the data
  as_user "mv worlds.tar $WORLD_BACKUPPATH/chksum/worlds_backup"           # Move the tarball to the temporary "chksum/worlds_backup" directory
  
  cd $WORLD_BACKUPPATH/chksum
  WORLD_checksum=$(ls worlds | cksum)                                      # Set $WORLD_checksum to the value of the checksum of the current worlds' tarball
  BACKUP_checksum=$(ls worlds_backup | cksum)                              # Set $BACKUP_checksum to the value of the checksum of the newest backup's tarball

  cd $WORLD_BACKUPPATH ; rm -rf chksum                                     # Delete the chksum directory
  
  # Compare the values of the checksums
  if [ "$WORLD_checksum" = "$BACKUP_checksum" ]
  then 
    echo "Backup Complete"
    as_user "screen -p 0 -S codecraft -X eval 'stuff \"say $BACKUP_DONE_MSG\"\015'" 
    exit 0
  else 
    echo "Backup failed! The source and target contents do not match!"
    echo "Worlds: $WORLD_checksum"; echo "Backup: $BACKUP_checksum"
    as_user "screen -p 0 -S codecraft -X eval 'stuff \"say $BACKUP_FAIL_MSG\"\015'" 
    exit 1
  fi
}

mc_rd_start() {
RUN_DIR=$(dirname $0)
# exit status from mcramdisk script will determine wether
#  the ramdisk is mounted, if it is
 if $RUN_DIR/mcramdisk mount
 then
  if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null   # Is service running?
  then
    echo "Tried to start but $SERVICE was already running!"                 # Instance exists, tell the user
  else
    echo "$SERVICE was not running... prepping RAMDISK."                    # Instance does not exist, tell user we are going to start it
    if [ ! -d $WORLD_PATH/$WORLD_NAME ]                                     # Checking for the  existance of a world using the name defined in server.properties
    then
     echo "$WORLD_NAME is not in $WORLD_PATH!"                              # If no world exists, tell the user
    else
     cd $WORLD_PATH                                                         # If the world does exist, cd to $WORLD_PATH
     for dir in *                                                           # For each folder in WORLD_PATH,
     do
      if [ ! -d $RD_PATH/$dir ]                                             # We are going to make sure it does not reside on the RAMDISK
      then
       javwc=`expr match "$dir" '.*[0-9]'`                                  # Expression to filter out the world backups (ignore something ending with a number)
       if [ -d "$dir" ] && [ -f "$dir/level.dat" ] && [ $javwc -eq 0 ]      # Make sure it is a directory, and that it has a level.dat file in it, and the it IS NOT a backup
       then
        as_user "cp -R $dir $RD_PATH/"                                      # Copy the world from $WORLD_PATH to $RD_PATH
        if [ -d $MC_PATH/$dir ]                                             # Are there folders or symlinks already in $MC_PATH?
        then
         as_user "mv $MC_PATH/$dir $MC_PATH/$dir.old"                       # Rename them with the suffix ".old"
        fi
        # Linking ramdisk to server directory
        as_user "ln -s $RD_PATH/$dir $MC_PATH/$dir"                         # Setup the symlinks to the worlds on the RAMDISK
       fi
      fi
     done
     mc_start                                                               # Then start the server as normal.
   fi                                                                       # Close if statement "world exist?"
  fi                                                                        # Close if statement "running?"
 else
  echo "Cound not start $SERVICE, ramdisk could not be mounted"
 fi                                                                         # Close if statement "RAMDISK mounted?"
}

mc_rd_save() {
 if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
 then
  if [ ! -d $RD_PATH/$WORLD_NAME ]
  then
   echo "Nothing in $RD_PATH to backup!"
  else
   echo "Saving ramdisk to disk."

    # Stop live saving by bukkit, initiate world save
    as_user "screen -p 0 -S $SCREEN_NAME -X eval 'stuff \"save-off\"\015'"
    as_user "screen -p 0 -S $SCREEN_NAME -X eval 'stuff \"save-all\"\015'"
    sleep 3

    cd $RD_PATH
    filedate=$(date +"-%F-%H.%M")
    # If there is a directory inside $RD_PATH, for loop will copy only those
    # with a "level.dat" file inside them.
    for dir in *
    do
    # Making sure we only copy world folders.
     if [ -d "$dir" ] && [ -f "$dir/level.dat" ]
     then

    # Need a way to determine how old backups are dealt with.
    # Currently this can easily overpopulate your world folder.
    #   if [ -d $WORLD_PATH/$dir ] && [ -d $WORLD_PATH/$dir"2" ]
    #   then
    #    # Previous save exists, delete
    #    echo "Making room for "$dir" backup, removing "$dir"2."
    #    as_user "rm -r $WORLD_PATH/world2"
    #   fi

       # If $dir esists in $WORLD_PATH folder, then rename it with $dir and a $filedate
       if [ -d $WORLD_PATH/$dir ]
       then
        # Move current $dir to $dir$filedate
        echo "Moving "$WORLD_PATH\/$dir" to "$WORLD_PATH\/$dir$filedate
        as_user "mv "$WORLD_PATH/$dir"/ "$WORLD_PATH\/$dir$filedate
       fi
       # Copying from $RD_PATH to $WORLD_PATH
       echo "$dir being copied to disk"
       as_user "cp -R $RD_PATH/$dir $WORLD_PATH/"
     else
      echo "Nothing copied from ramdisk."
     fi
    done

   # Start live saving by bukkit
   as_user "screen -p 0 -S codecraft -X eval 'stuff \"save-on\"\015'"
  fi
 else
  # Service not running, nothing to save
  echo "Nothing to save, $SERVICE is not running."
 fi
}

#Start-Stop here
case "$1" in
  start)
    mc_start
    ;;
  stop)
    mc_stop
    ;;
  restart)
    if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
    then
      as_user "screen -p 0 -S codecraft -X eval 'stuff \"say $RESTART_MSG\"\015'"
      mc_stop
      mc_start
    else
      mc_start
    fi
    ;;
  worldbackup)
    DATE=$(date "+%Y.%m.%d")
    TIME=$(date "+%H-%M")
    as_user "screen -p 0 -S codecraft -X eval 'stuff \"say $BACKUP_START_MSG\"\015'"
    mc_saveoff
    mc_world_backup
    mc_world_backup_cksum
    mc_saveon
    ;;
  status)
    if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
    then echo "$SERVICE is running."
    else echo "$SERVICE is not running."
    fi
    ;;
  start_rd)
    # Start a RD instance
    mc_rd_start
    ;;
  rd2disk)
    # Backup RD contents
    mc_rd_save
    ;;

  *)
  echo "Usage: /etc/init.d/minecraft {start|stop|worldbackup|status|restart}"
  exit 1
  ;;
esac

exit 0
